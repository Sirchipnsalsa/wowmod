/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package managerv2;

import managerv2.item.Item;
import java.awt.Component;
import java.awt.Container;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Scanner;
import java.util.WeakHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author alandarev
 */
public class All {
  public static final String TITLE = "Item Manager v2";
  Items<Item> items = new Items<Item>();
  MainWindow window;
  SimpleDateFormat format;
  
  
  All() {
    format = new SimpleDateFormat("[HH:mm:ss]: ");
    
  }
  
  void Reset()  {
    items = new Items<Item>();
  }
  

  boolean isSafe() {
    return (items.size()<=0);
  }
  
  public synchronized void println(String msg)  {
    Date date = new Date();
    
    window.jTextArea1.append(format.format(date) + msg+"\n");
    window.jTextArea1.setCaretPosition(window.jTextArea1.getDocument().getLength());
  }

  boolean LoadFile(final File file) {
    println("Loading "+ file.getName() + " file");
    IParser iparser = new IParser(this, file);
    iparser.execute();

    
    return true;
  }
  
  
  public void setEnabled() {
    setEnabledRecursive(window.mainFrame, +1);
    setEnabledRecursive(window.mainMenu, +1);
  }

  public void setDisabled() {
    setEnabledRecursive(window.mainFrame, -1);
    setEnabledRecursive(window.mainMenu, -1);
  }
    
  private static final Map<Component, Integer> componentAvailability = new WeakHashMap<Component, Integer>();

  // val = 1 for enabling, val = -1 for disabling
  private static void setEnabledRecursive(Component component, int val) {
    if (component != null) {
        final Integer oldValObj = componentAvailability.get(component);
        final int oldVal = (oldValObj == null)
                ? 0
                : oldValObj;
        final int newVal = oldVal + val;
        componentAvailability.put(component, newVal);

        if (newVal >= 0) {
            component.setEnabled(true);
        } else if (newVal < 0) {
            component.setEnabled(false);
        }
        if (component instanceof Container) {
            Container componentAsContainer = (Container) component;
            for (Component c : componentAsContainer.getComponents()) {
                setEnabledRecursive(c,val);
            }
        }
    }
  }

  int AskContinue(String ask) {
    String[] answers = { "No", "Yes for all", "Yes" };
    int n = JOptionPane.showOptionDialog(window, ask, "Warning", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, answers, answers[2]);
    System.out.println("n = " + n);
    return n;
  }

  void Header(String format) {
    window.setTitle(TITLE + " " + format);
  }
  
  public void writeToFile(File file)  {
    if(!file.exists())  {
      try {
        file.createNewFile();
      } catch (IOException ex) {
        println("ERR: Could not create file");
        return;
      }
    }
    FileWriter stream;
    try {
      stream = new FileWriter(file);
    } catch (IOException ex) {
      println("ERR: Could not open file");
      return;
    }
    BufferedWriter out = new BufferedWriter(stream);
    try {
      out.write("//AUTO Generated by Item Manager v2\n");
      out.write("\"items\"\n{\n");
      for(Object item : items)  {

          out.write(((Item)item).toString());

      }
      
      out.write("}\n");
      
      out.close();
      stream.close();
      

    } catch (IOException ex) {
      println("ERR: Fatal Error in writing a line.");
      return;
    }
    
    println("File Saved!");
    Header("Saved");
  }
  
  public void saveToSQL(String pass)  {
    println("Connecting to the SQL Server with supplied password...");
    String dbUrl = "jdbc:mysql://wowmod.eu/wowmod_test";
    try {
      Class.forName("com.mysql.jdbc.Driver");
    } catch (ClassNotFoundException ex) {
      println("Failed: No MySQL Driver found");
    }
    try {
      Connection con = DriverManager.getConnection (dbUrl,"stinkyfax",pass);
      //ResultSet rs = stmt.executeQuery(query);
      //ResultSet rs = stmt.executeQuery(query);
      println("Dropping rows");
      Statement stmt = con.createStatement();
      stmt.execute("DELETE FROM wc_StaticItems WHERE TRUE;");
      
      
      con.close();
      println("Finished SQL Export");
    } catch (SQLException ex) {
      println("Failed: "+ex.getLocalizedMessage());
    }

  }
}
